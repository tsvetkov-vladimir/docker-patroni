# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "debian/jessie64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  config.vm.network "private_network", type: "dhcp"
  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  #config.disksize.size = '50GB'
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #  vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #  vb.memory = "1024"
    # имя виртуальной машины
    vb.name = "debian-patroni"
    # объем оперативной памяти
    vb.memory = "2048"
    # количество ядер процессора
    vb.cpus = "1"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
    class IPadress
        def to_s
            print "Выберите сетевой интерфейс для  docker swarm init: "
            STDIN.gets.chomp
        end
    end

    class IPkeepadress
        def to_s
            print "Задайте виртуальный IP адрес для keepalived: "
            STDIN.gets.chomp
        end
    end

    class NetInterface
        def to_s
            print "Задайте сетевой интерфейс для keepalived: "
            STDIN.gets.chomp
        end
    end

    class Join
        def to_s
            print "Если планируете присоединить worker, то присоедините и после продолжите. Иначе просто продолжите."
            STDIN.gets.chomp
        end
    end

#    class Password
#        def to_s
#            begin
#            system 'stty -echo'
#            print "Password: "
#            pass = URI.escape(STDIN.gets.chomp)
#            ensure
#            system 'stty echo'
#            end
#            pass
#        end
#    end


   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get install -y git keepalived
     git clone https://github.com/tsvetkov-vladimir/docker-patroni.git
     cd docker-patroni/
     ./install_docker.sh
     ./create_images.sh
     echo "Найдены следующие сетевые интерфейсы:"
     ip addr show|egrep '^ *inet' | grep brd | egrep -E -v "docker" | awk -- '{ print $2,$7}'
     SHELL

    $script = <<-'SHELL'
     docker swarm init --advertise-addr ${NETIF}
     cd docker-patroni/
     sudo sed -i "s|^\(\s*interface \).*|\1${NETIFKEEPALIVED}|" keepalived/keepalived.conf
     sudo sed -i "s/^\(\s*\)0.0.0.0/\1${IPKEEPALIVED}\/32/" keepalived/keepalived.conf
     sudo cp keepalived/keepalived.conf /etc/keepalived/
    SHELL

    config.vm.provision "shell", env: {"NETIF" => IPadress.new, "NETIFKEEPALIVED" => NetInterface.new, "IPKEEPALIVED" => IPkeepadress.new}, inline: $script
    config.vm.provision "shell", env: {"EMPTY" => Join.new}, inline: <<-'SHELL'
     cd docker-patroni/
     sudo systemctl restart keepalived.service
     ./deploy.sh
    SHELL
end
